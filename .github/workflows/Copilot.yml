name: copilot

on:
  workflow_dispatch:
  push:
    branches:
      - main
  schedule:
    - cron: '0 0 * * *'  # Executa todo dia à meia-noite

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Clonar repositório do fork
      uses: actions/checkout@v4
      with:
        fetch-depth: 0  # Pega todas as versões para evitar conflitos

    - name: Configurar Git
      run: |
        git config --global user.name "github-actions"
        git config --global user.email "actions@github.com"

    - name: Adicionar repositório original e sincronizar com o fork
      run: |
        git remote add upstream https://github.com/pr3y/Bruce || echo "Upstream já existe"
        git fetch upstream
        git checkout main
        git merge --allow-unrelated-histories --no-edit upstream/main || echo "Conflito detectado"

    - name: Resolver conflito forçando a versão do fork
      run: |
        git checkout --ours src/modules/rf/rf.cpp
        git add src/modules/rf/rf.cpp
        git commit -m "Resolvendo conflito no rf.cpp usando versão do fork" || echo "Nada para commit"

    - name: Restaurar `rf.cpp` para garantir a versão do fork
      run: git checkout origin/main -- src/modules/rf/rf.cpp

    - name: Instalar PlatformIO
      run: pip install platformio

    - name: Compilar firmware
      run: pio run

    - name: Criar pasta de firmware compilado
      run: mkdir -p teste && cp .pio/build/*/*.bin teste/

    - name: Commit e Push das alterações
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      run: |
        git add teste/
        git commit -m "Atualização automática do firmware" || echo "Nada para commit"
        git push https://x-access-token:${GITHUB_TOKEN}@github.com/${{ github.repository }}.git HEAD:main